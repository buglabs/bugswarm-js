#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
  , exec = require('child_process').exec
  , path = require('path')
  , mocha = require('../')
  , reporters = mocha.reporters
  , interfaces = mocha.interfaces
  , Runner = mocha.Runner
  , Suite = mocha.Suite
  , vm = require('vm')
  , fs = require('fs')
  , join = path.join
  , cwd = process.cwd();

/**
 * Files.
 */

var files = [];

// options

program
  .version(mocha.version)
  .usage('[options] <files>')
  .option('-r, --require <name>', 'require the given module')
  .option('-R, --reporter <name>', 'specify the reporter to use', 'dot')
  .option('-u, --ui <name>', 'specify user-interface (bdd|tdd|exports)', 'bdd')
  .option('-g, --growl', 'enable growl support')

// report help

program.on('--help', function(){
  console.log('  Reporters:');
  console.log('');
  console.log('    dot - dot matrix');
  console.log('    json - single json object');
  console.log('    progress - progress bar');
  console.log('    list - spec-style listing');
  console.log('    tap - test-anything-protocol');
  console.log('    landing - unicode landing strip');
  console.log('    json-stream - newline delimited json events');
  console.log('');
});

// -r, --require

program.on('require', function(mod){
  require(mod);
});

// parse args

program.parse(process.argv);

// infinite stack traces

Error.stackTraceLimit = Infinity; // TODO: config

// reporter

var suite = new Suite('')
  , Reporter = require('../lib/reporters/' + program.reporter)
  , ui = interfaces[program.ui](suite);

// files

var files = program.args;

// display help when no files are given

if (!files.length) {
  process.stdout.write(program.helpInformation());
  process.exit(0);
}

// require test files before running
// the root suite

var pending = files.length;
files.forEach(function(file){
  file = join(cwd, file);
  suite.emit('pre-require', global, file);
  suite.emit('require', require(file), file);
  suite.emit('post-require', global, file);
  --pending || run(suite);
});

// run the given suite

function run(suite) {
  suite.emit('run');
  var runner = new Runner(suite);
  var reporter = new Reporter(runner);
  if (program.growl) growl(runner, reporter)
  runner.run();
}

// enable growl notifications

function growl(runner, reporter) {
  runner.on('end', function(){
    var stats = reporter.stats;
    if (stats.failures) {
      var msg = stats.failures + ' of ' + stats.tests + ' tests failed:\n\n';
      msg += titles(reporter.failures).join('\n');
      notify(msg, { title: 'Fail' });
    } else {
      notify(stats.passes + ' tests passed in ' + stats.duration + 'ms', {
        title: 'Pass'
      });
    }
  });
}

// test titles

function titles(tests) {
  return tests.map(function(test, i){
    return i + ') ' + test.title + ': ' + test.err.message;
  });
}

// growl notification

function notify(msg, options) {
  var image
    , args = ['growlnotify', '-m', '"' + msg + '"']
    , options = options || {}
    , fn = fn || function(){};

  if (image = options.image) {
    var flag, ext = path.extname(image).substr(1)
    flag = flag || ext == 'icns' && 'iconpath'
    flag = flag || /^[A-Z]/.test(image) && 'appIcon'
    flag = flag || /^png|gif|jpe?g$/.test(ext) && 'image'
    flag = flag || ext && (image = ext) && 'icon'
    flag = flag || 'icon'
    args.push('--' + flag, image)
  }

  if (options.sticky) args.push('--sticky');
  if (options.priority) args.push('--priority', options.priority);
  if (options.name) args.push('--name', options.name);
  if (options.title) args.push(options.title);
  exec(args.join(' '), fn);
}