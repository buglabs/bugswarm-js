
/**
 * Expose `Test`.
 */

module.exports = Test;

/**
 * Initialize a new `Test` with the given `title` and callback `fn`.
 *
 * @param {String} title
 * @param {Function} fn
 * @api private
 */

function Test(title, fn) {
  this.title = title;
  this.fn = fn;
  this.async = !! fn.length;
  this.sync = ! this.async;
  this.timeout(2000);
}

/**
 * Set timeout `ms`.
 *
 * @param {Number} ms
 * @return {Test} for chaining
 * @api private
 */

Test.prototype.timeout = function(ms){
  this._timeout = ms;
  return this;
};

/**
 * Return the full title generated by recursively
 * concatenating the parent's full title.
 *
 * @return {String}
 * @api public
 */

Test.prototype.fullTitle = function(){
  return this.parent.fullTitle() + ' ' + this.title;
};

/**
 * Run the test and invoke `fn(err)`.
 *
 * @param {Function} fn
 * @api private
 */

Test.prototype.run = function(fn){
  var timer
    , self = this
    , ms = this._timeout
    , start = new Date;

  // timeout
  if (this.async) {
    timer = setTimeout(function(){
      fn(new Error('timeout of ' + ms + 'ms exceeded'));
    }, ms);
  }

  // async
  if (this.async) {
    this.fn(function(err){
      clearTimeout(timer);
      self.duration = new Date - start;
      fn(err);
    });
  // sync
  } else {
    this.fn();
    this.duration = new Date - start;
  }
};
